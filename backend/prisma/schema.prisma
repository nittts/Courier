// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  output   = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cities {
  id       Int        @id @default(autoincrement()) @db.Integer
  name     String     @unique @db.VarChar(256)
  postcode String     @db.VarChar(12)

  branches branches[]
}

model branches {
  id                    Int         @id @default(autoincrement()) @db.Integer
  name                  String      @unique @db.VarChar(256)
  address               String      @db.VarChar(256)
  city_id               Int
  branch_lat            String      @db.Char(21)
  branch_long           String      @db.Char(21) 

  users                 users[]
  trucks                trucks[]

  shipments_destination shipments[] @relation("destination")
  shipments_departure   shipments[] @relation("departure")
  city                  cities      @relation(fields: [city_id], references: [id])
}

model userTypes {
  id   Int      @id @default(autoincrement()) @db.Integer
  type String   @unique @db.VarChar(128)

  users users[]
}

model users {
  id           String      @id @db.VarChar(40)
  name         String      @db.VarChar(256)
  email        String      @db.VarChar(128)
  password     String      @db.VarChar(128)
  phone        String      @db.VarChar(20)
  user_type_id Int        @db.Integer
  branch_id    Int?        
  createdOn    DateTime    @db.Timestamp()

  trucks      trucks[]
  parcels     parcels[]  
  shipments   shipments?
  userTypes   userTypes? @relation(fields: [user_type_id], references: [id], onDelete: Cascade)
  branches    branches?  @relation(fields: [branch_id], references: [id], onDelete: SetNull)
}


model trucks {
  id            Int         @id @default(autoincrement()) @db.Integer
  license_plate String      @unique @db.VarChar(20)
  brand         String      @db.VarChar(128)
  max_weight    Float       @db.DoublePrecision
  available     Boolean
  driver_id     String?     @db.VarChar(36)
  branch_id     Int         

  shipments     shipments?
  users         users?      @relation(fields: [driver_id], references: [id], onDelete: SetNull)
  branch        branches?   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
}


model products {
  id        Int       @id @default(autoincrement()) @db.Integer
  name      String    @db.VarChar(256)
  weight    Decimal   @db.Decimal()
  parcel_id String?   @db.VarChar(36)

  parcels   parcels?  @relation(fields: [parcel_id], references: [id], onDelete: Cascade)
}

model parcels {
  id                    String       @id @db.VarChar(40)
  name                  String       @db.VarChar(256)
  content               String       @db.VarChar(256)
  volume_weight         Float        @db.DoublePrecision
  admission_date        DateTime     @db.Timestamp()
  client_id             String?      @db.VarChar(36)
  shipment_id           String?      @db.VarChar(36) @unique

  products              products[]

  shipments             shipments?   @relation(fields: [shipment_id], references: [id], onDelete: Cascade)
  users                 users?        @relation(fields:  [client_id], references: [id], onDelete: Cascade)
}

model shipments {
  id                    String    @id @db.VarChar(41)
  status                String    @db.VarChar(128)
  arrival_time          DateTime? @db.Timestamp()
  departure_time        DateTime  @db.Timestamp()
  weight                Float     @db.DoublePrecision

  truck_id              Int       @unique 
  driver_id             String    @unique @db.VarChar(36)
  destination_branch    Int       @unique
  departure_branch      Int       @unique       

  parcels               parcels[] 

  truck                 trucks?   @relation(fields: [truck_id], references: [id])
  users                 users     @relation(fields: [driver_id], references: [id])
  branch_destination    branches? @relation(name: "destination", fields: [destination_branch], references: [id])
  branch_departure      branches? @relation(name: "departure", fields: [departure_branch], references: [id])
}
