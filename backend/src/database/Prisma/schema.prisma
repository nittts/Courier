// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  output   = "../src/database/Prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model cities {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(256)
  postcode String     @db.VarChar(12)

  branches branches[]
}

model branches {
  id                    Int         @id @default(autoincrement())
  name                  String      @unique @db.VarChar(256)
  address               String      @db.VarChar(256)
  city_id               Int
  branch_lat            String     @db.Char(21)
  branch_long           String     @db.Char(21) 

  users                 users[]
  trucks                trucks[]

  shipments_destination shipments[] @relation("destination")
  shipments_departure   shipments[] @relation("departure")
  city                  cities      @relation(fields: [city_id], references: [id])
}

model userTypes {
  id   Int      @id @default(autoincrement())
  type String   @unique @db.VarChar(36)

  users users[]
}

model users {
  id          String      @id @db.VarChar(36)
  name        String      @db.VarChar(256)
  email       String      @db.VarChar(128)
  password    String      @db.VarChar(128)
  phone       String      @db.VarChar(20)
  userType_id Int        @unique
  branch_id   Int?        @unique

  drivers     drivers?
  clients     parcels[]
  userTypes   userTypes? @relation(fields: [userType_id], references: [id])
  branches    branches?   @relation(fields: [branch_id], references: [id], onDelete: SetNull)
}

model drivers {
  user_id   String      @unique
  truck_id  Int?

  shipments shipments?
  trucks    trucks[]
  users     users       @relation(fields: [user_id], references: [id])
}

model trucks {
  id            Int         @id @default(autoincrement())
  license_plate String      @unique @db.VarChar(20)
  brand         String      @db.VarChar(128)
  max_weight    Float       @db.DoublePrecision
  available     Boolean
  driver_id     String?
  branch_id     Int         @unique

  shipments     shipments?
  driver        drivers?    @relation(fields: [driver_id], references: [user_id], onDelete: SetNull)
  branch        branches?   @relation(fields: [branch_id], references: [id], onDelete: Cascade)
}

model parcels {
  id             String       @id @db.VarChar(36)
  name           String       @db.VarChar(256)
  content        String       @db.VarChar(256)
  volume_weight  Float        @db.DoublePrecision
  admission_date DateTime     @db.Timestamp()
  client_id      String       @db.VarChar(36)
  shipment_id    String?      @db.VarChar(36) @unique

  shipments      shipments?    @relation(fields: [shipment_id], references: [id]) 
  client         users        @relation(fields: [client_id], references: [id], onDelete: Cascade)
}

model shipments {
  id                 String    @id @db.VarChar(36)
  status             String       @db.VarChar(36)
  arrival_time       DateTime?  @db.Timestamp()
  departure_time     DateTime  @db.Timestamp()
  weight             Decimal   @db.Decimal()

  truck_id           Int       @unique 
  driver_id          String    @unique @db.VarChar(36)
  destination_branch Int       @unique
  departure_branch   Int       @unique
  parcel_id          String?    @unique @db.VarChar(36)

  truck              trucks?   @relation(fields: [truck_id], references: [id] )
  drivers            drivers?  @relation(fields: [driver_id], references: [user_id])
  branch_destination branches? @relation(name: "destination", fields: [destination_branch], references: [id])
  branch_departure   branches? @relation(name: "departure", fields: [departure_branch], references: [id])
  parcels            parcels[]
}
